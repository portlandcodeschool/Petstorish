require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe OptionsController do



  describe "GET index" do

    it "assigns all options as @options" do
      @options = [mock_model(Option)]
      Option.should_receive(:all).and_return(@options)
      get :index
    end
  
  end

  describe "GET show" do
    
    it "assigns the requested option as @option" do
      @option = mock_model(Option)
      Option.should_receive(:find).and_return(@option)
      get :show, :id => @option
    end

  end

  describe "GET new" do
    
    it "should create a new Option" do
      Option.should_receive(:new).and_return(mock_model(Option))
      get :new
    end
  
  end

  describe "GET edit" do

    it "assigns the requested option as @option" do
      @option = mock_model(Option)
      Option.should_receive(:find).with(@option.id.to_s).and_return(@option)
      get :edit, :id => @option.id
    end

  end

  describe "POST create" do
    describe "with valid params" do

      before(:each) do
        @option = mock_model(Option)
        @option.stub(:update_attributes).and_return(true)
        @option.stub(:save).and_return(true)
        Option.stub(:new).and_return(@option)
       end

      it "creates a new Option" do
        Option.should_receive(:new).and_return(@option)
        post :create
      end

      it "saves the new Option" do
        @option.should_receive(:save).and_return(@option)
        post :create
      end

      it "assigns a newly created option as @option" do
        post :create
        assigns(:option).should eq @option
      end

      it "redirects to the created option" do
        post :create
        response.should redirect_to(@option)
      end
    end #describe "with valid...

    describe "with invalid params" do

      before(:each) do
        @option = mock_model(Option)
        @option.stub(:update_attributes).and_return(false)
        @option.stub(:save).and_return(false)
        Option.stub(:new).and_return(@option)
       end

      it "assigns a newly created but unsaved option as @option" do
        @option.should_receive(:save)
        post :create
        assigns(:option).should eq @option
      end

      it "re-renders the 'new' template" do
        post :create
        response.should render_template('options/new')
      end
    end #describe "with invalid...
  end #describe "POST create"...

  describe "PUT update" do
    describe "with valid params" do

      before(:each) do
        @option = mock_model(Option)
        Option.stub(:find).and_return(@option)
        @option.stub(:update_attributes).and_return(true)
      end

      it "updates the requested option" do
        @option.should_receive(:update_attributes)
        post :update, :id => @option.id
     end

      it "assigns the requested option as @option" do
        post :update, :id => @option.id
        assigns(:option).should eq @option
     end

      it "redirects to the option" do
        post :update, :id => @option.id
        response.should redirect_to(@option)
     end
    end #describe "with valid...

    describe "with invalid params" do

      before(:each) do
        @option = mock_model(Option)
        Option.stub(:find).and_return(@option)
        @option.stub(:update_attributes).and_return(false)
      end

      it "re-renders the 'edit' template" do
        post :update, :id => @option.id
        response.should render_template('options/edit')
     end
    end #describe "with invalid...
  end #describe "PUT update...

  describe "DELETE destroy" do

    it "destroys the requested option" do
     # expect {
     #   delete :destroy, {:id => option.to_param}, valid_session
     # }.to change(Option, :count).by(-1)
    end

    it "redirects to the options list" do
      #delete :destroy, {:id => option.to_param}, valid_session
      #response.should redirect_to(options_url)
    end
  end

end
